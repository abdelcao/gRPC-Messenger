// @generated by protoc-gen-es v2.2.5 with parameter "import_extension=ts"
// @generated from file protos/auth/auth_service.proto (package auth, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file protos/auth/auth_service.proto.
 */
export declare const file_protos_auth_auth_service: GenFile;

/**
 * Messages pour l'inscription
 *
 * @generated from message auth.RegisterRequest
 */
export declare type RegisterRequest = Message<"auth.RegisterRequest"> & {
  /**
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * @generated from field: string password = 2;
   */
  password: string;

  /**
   * @generated from field: string username = 3;
   */
  username: string;
};

/**
 * Describes the message auth.RegisterRequest.
 * Use `create(RegisterRequestSchema)` to create a new message.
 */
export declare const RegisterRequestSchema: GenMessage<RegisterRequest>;

/**
 * @generated from message auth.RegisterResponse
 */
export declare type RegisterResponse = Message<"auth.RegisterResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: string userId = 3;
   */
  userId: string;
};

/**
 * Describes the message auth.RegisterResponse.
 * Use `create(RegisterResponseSchema)` to create a new message.
 */
export declare const RegisterResponseSchema: GenMessage<RegisterResponse>;

/**
 * Messages pour la connexion
 *
 * @generated from message auth.LoginRequest
 */
export declare type LoginRequest = Message<"auth.LoginRequest"> & {
  /**
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * @generated from field: string password = 2;
   */
  password: string;
};

/**
 * Describes the message auth.LoginRequest.
 * Use `create(LoginRequestSchema)` to create a new message.
 */
export declare const LoginRequestSchema: GenMessage<LoginRequest>;

/**
 * @generated from message auth.LoginResponse
 */
export declare type LoginResponse = Message<"auth.LoginResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  /**
   * @generated from field: string token = 3;
   */
  token: string;

  /**
   * @generated from field: string refreshToken = 4;
   */
  refreshToken: string;

  /**
   * @generated from field: string userId = 5;
   */
  userId: string;

  /**
   * @generated from field: string username = 6;
   */
  username: string;

  /**
   * @generated from field: string role = 7;
   */
  role: string;
};

/**
 * Describes the message auth.LoginResponse.
 * Use `create(LoginResponseSchema)` to create a new message.
 */
export declare const LoginResponseSchema: GenMessage<LoginResponse>;

/**
 * Messages pour la validation de token
 *
 * @generated from message auth.TokenValidationRequest
 */
export declare type TokenValidationRequest = Message<"auth.TokenValidationRequest"> & {
  /**
   * @generated from field: string token = 1;
   */
  token: string;
};

/**
 * Describes the message auth.TokenValidationRequest.
 * Use `create(TokenValidationRequestSchema)` to create a new message.
 */
export declare const TokenValidationRequestSchema: GenMessage<TokenValidationRequest>;

/**
 * @generated from message auth.TokenValidationResponse
 */
export declare type TokenValidationResponse = Message<"auth.TokenValidationResponse"> & {
  /**
   * @generated from field: bool isValid = 1;
   */
  isValid: boolean;

  /**
   * @generated from field: string userId = 2;
   */
  userId: string;

  /**
   * @generated from field: string role = 3;
   */
  role: string;
};

/**
 * Describes the message auth.TokenValidationResponse.
 * Use `create(TokenValidationResponseSchema)` to create a new message.
 */
export declare const TokenValidationResponseSchema: GenMessage<TokenValidationResponse>;

/**
 * Messages pour le rafra√Æchissement de token
 *
 * @generated from message auth.RefreshTokenRequest
 */
export declare type RefreshTokenRequest = Message<"auth.RefreshTokenRequest"> & {
  /**
   * @generated from field: string refreshToken = 1;
   */
  refreshToken: string;
};

/**
 * Describes the message auth.RefreshTokenRequest.
 * Use `create(RefreshTokenRequestSchema)` to create a new message.
 */
export declare const RefreshTokenRequestSchema: GenMessage<RefreshTokenRequest>;

/**
 * @generated from message auth.RefreshTokenResponse
 */
export declare type RefreshTokenResponse = Message<"auth.RefreshTokenResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * @generated from field: string refreshToken = 3;
   */
  refreshToken: string;
};

/**
 * Describes the message auth.RefreshTokenResponse.
 * Use `create(RefreshTokenResponseSchema)` to create a new message.
 */
export declare const RefreshTokenResponseSchema: GenMessage<RefreshTokenResponse>;

/**
 * Service d'authentification
 *
 * @generated from service auth.AuthService
 */
export declare const AuthService: GenService<{
  /**
   * @generated from rpc auth.AuthService.Register
   */
  register: {
    methodKind: "unary";
    input: typeof RegisterRequestSchema;
    output: typeof RegisterResponseSchema;
  },
  /**
   * @generated from rpc auth.AuthService.Login
   */
  login: {
    methodKind: "unary";
    input: typeof LoginRequestSchema;
    output: typeof LoginResponseSchema;
  },
  /**
   * @generated from rpc auth.AuthService.ValidateToken
   */
  validateToken: {
    methodKind: "unary";
    input: typeof TokenValidationRequestSchema;
    output: typeof TokenValidationResponseSchema;
  },
  /**
   * @generated from rpc auth.AuthService.RefreshToken
   */
  refreshToken: {
    methodKind: "unary";
    input: typeof RefreshTokenRequestSchema;
    output: typeof RefreshTokenResponseSchema;
  },
}>;

