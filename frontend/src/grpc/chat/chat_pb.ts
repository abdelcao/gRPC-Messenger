// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file chat/chat.proto (package chat, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import type { Message as Message$1 } from "@bufbuild/protobuf";

/**
 * Describes the file chat/chat.proto.
 */
export const file_chat_chat: GenFile = /*@__PURE__*/
  fileDesc("Cg9jaGF0L2NoYXQucHJvdG8SBGNoYXQiWAoOTWVzc2FnZVJlcXVlc3QSEAoIc2VuZGVySWQYASABKAkSEgoKcmVjZWl2ZXJJZBgCIAEoCRIPCgdjb250ZW50GAMgASgJEg8KB2lzR3JvdXAYBCABKAgiSAoPTWVzc2FnZVJlc3BvbnNlEg8KB3N1Y2Nlc3MYASABKAgSEQoJbWVzc2FnZUlkGAIgASgEEhEKCXRpbWVzdGFtcBgDIAEoCSJSCg5IaXN0b3J5UmVxdWVzdBIOCgZ1c2VySWQYASABKAQSEAoIdGFyZ2V0SWQYAiABKAkSDwoHaXNHcm91cBgDIAEoCBINCgVsaW1pdBgEIAEoBSIfCg1TdHJlYW1SZXF1ZXN0Eg4KBnVzZXJJZBgBIAEoBCKEAQoHTWVzc2FnZRIKCgJpZBgBIAEoBBIQCghzZW5kZXJJZBgCIAEoCRISCgpzZW5kZXJOYW1lGAMgASgJEhIKCnJlY2VpdmVySWQYBCABKAkSDwoHY29udGVudBgFIAEoCRIRCgl0aW1lc3RhbXAYBiABKAkSDwoHaXNHcm91cBgHIAEoCCJHCgxHcm91cFJlcXVlc3QSEQoJY3JlYXRvcklkGAEgASgJEhEKCWdyb3VwTmFtZRgCIAEoCRIRCgltZW1iZXJJZHMYAyADKAkiRAoNR3JvdXBSZXNwb25zZRIPCgdzdWNjZXNzGAEgASgIEg8KB2dyb3VwSWQYAiABKAkSEQoJZ3JvdXBOYW1lGAMgASgJIiMKEVVzZXJHcm91cHNSZXF1ZXN0Eg4KBnVzZXJJZBgBIAEoBCIxChJVc2VyR3JvdXBzUmVzcG9uc2USGwoGZ3JvdXBzGAEgAygLMgsuY2hhdC5Hcm91cCJHCgVHcm91cBIKCgJpZBgBIAEoBBIMCgRuYW1lGAIgASgJEhEKCWNyZWF0b3JJZBgDIAEoCRIRCgltZW1iZXJJZHMYBCADKAkyuQIKC0NoYXRTZXJ2aWNlEjoKC1NlbmRNZXNzYWdlEhQuY2hhdC5NZXNzYWdlUmVxdWVzdBoVLmNoYXQuTWVzc2FnZVJlc3BvbnNlEjoKEUdldE1lc3NhZ2VIaXN0b3J5EhQuY2hhdC5IaXN0b3J5UmVxdWVzdBoNLmNoYXQuTWVzc2FnZTABEjYKDlN0cmVhbU1lc3NhZ2VzEhMuY2hhdC5TdHJlYW1SZXF1ZXN0Gg0uY2hhdC5NZXNzYWdlMAESNgoLQ3JlYXRlR3JvdXASEi5jaGF0Lkdyb3VwUmVxdWVzdBoTLmNoYXQuR3JvdXBSZXNwb25zZRJCCg1HZXRVc2VyR3JvdXBzEhcuY2hhdC5Vc2VyR3JvdXBzUmVxdWVzdBoYLmNoYXQuVXNlckdyb3Vwc1Jlc3BvbnNlQhwKDWNvbS5hZGlhLmNoYXRCCUNoYXRQcm90b1ABYgZwcm90bzM");

/**
 * Messages pour l'envoi de messages
 *
 * @generated from message chat.MessageRequest
 */
export type MessageRequest = Message$1<"chat.MessageRequest"> & {
  /**
   * @generated from field: string senderId = 1;
   */
  senderId: string;

  /**
   * Peut être un userId ou un groupId
   *
   * @generated from field: string receiverId = 2;
   */
  receiverId: string;

  /**
   * @generated from field: string content = 3;
   */
  content: string;

  /**
   * @generated from field: bool isGroup = 4;
   */
  isGroup: boolean;
};

/**
 * Describes the message chat.MessageRequest.
 * Use `create(MessageRequestSchema)` to create a new message.
 */
export const MessageRequestSchema: GenMessage<MessageRequest> = /*@__PURE__*/
  messageDesc(file_chat_chat, 0);

/**
 * @generated from message chat.MessageResponse
 */
export type MessageResponse = Message$1<"chat.MessageResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: uint64 messageId = 2;
   */
  messageId: bigint;

  /**
   * @generated from field: string timestamp = 3;
   */
  timestamp: string;
};

/**
 * Describes the message chat.MessageResponse.
 * Use `create(MessageResponseSchema)` to create a new message.
 */
export const MessageResponseSchema: GenMessage<MessageResponse> = /*@__PURE__*/
  messageDesc(file_chat_chat, 1);

/**
 * Messages pour l'historique
 *
 * @generated from message chat.HistoryRequest
 */
export type HistoryRequest = Message$1<"chat.HistoryRequest"> & {
  /**
   * @generated from field: uint64 userId = 1;
   */
  userId: bigint;

  /**
   * Peut être un userId ou un groupId
   *
   * @generated from field: string targetId = 2;
   */
  targetId: string;

  /**
   * @generated from field: bool isGroup = 3;
   */
  isGroup: boolean;

  /**
   * @generated from field: int32 limit = 4;
   */
  limit: number;
};

/**
 * Describes the message chat.HistoryRequest.
 * Use `create(HistoryRequestSchema)` to create a new message.
 */
export const HistoryRequestSchema: GenMessage<HistoryRequest> = /*@__PURE__*/
  messageDesc(file_chat_chat, 2);

/**
 * Messages pour le streaming en temps réel
 *
 * @generated from message chat.StreamRequest
 */
export type StreamRequest = Message$1<"chat.StreamRequest"> & {
  /**
   * @generated from field: uint64 userId = 1;
   */
  userId: bigint;
};

/**
 * Describes the message chat.StreamRequest.
 * Use `create(StreamRequestSchema)` to create a new message.
 */
export const StreamRequestSchema: GenMessage<StreamRequest> = /*@__PURE__*/
  messageDesc(file_chat_chat, 3);

/**
 * Structure de message
 *
 * @generated from message chat.Message
 */
export type Message = Message$1<"chat.Message"> & {
  /**
   * @generated from field: uint64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: string senderId = 2;
   */
  senderId: string;

  /**
   * @generated from field: string senderName = 3;
   */
  senderName: string;

  /**
   * @generated from field: string receiverId = 4;
   */
  receiverId: string;

  /**
   * @generated from field: string content = 5;
   */
  content: string;

  /**
   * @generated from field: string timestamp = 6;
   */
  timestamp: string;

  /**
   * @generated from field: bool isGroup = 7;
   */
  isGroup: boolean;
};

/**
 * Describes the message chat.Message.
 * Use `create(MessageSchema)` to create a new message.
 */
export const MessageSchema: GenMessage<Message> = /*@__PURE__*/
  messageDesc(file_chat_chat, 4);

/**
 * Messages pour la gestion des groupes
 *
 * @generated from message chat.GroupRequest
 */
export type GroupRequest = Message$1<"chat.GroupRequest"> & {
  /**
   * @generated from field: string creatorId = 1;
   */
  creatorId: string;

  /**
   * @generated from field: string groupName = 2;
   */
  groupName: string;

  /**
   * @generated from field: repeated string memberIds = 3;
   */
  memberIds: string[];
};

/**
 * Describes the message chat.GroupRequest.
 * Use `create(GroupRequestSchema)` to create a new message.
 */
export const GroupRequestSchema: GenMessage<GroupRequest> = /*@__PURE__*/
  messageDesc(file_chat_chat, 5);

/**
 * @generated from message chat.GroupResponse
 */
export type GroupResponse = Message$1<"chat.GroupResponse"> & {
  /**
   * @generated from field: bool success = 1;
   */
  success: boolean;

  /**
   * @generated from field: string groupId = 2;
   */
  groupId: string;

  /**
   * @generated from field: string groupName = 3;
   */
  groupName: string;
};

/**
 * Describes the message chat.GroupResponse.
 * Use `create(GroupResponseSchema)` to create a new message.
 */
export const GroupResponseSchema: GenMessage<GroupResponse> = /*@__PURE__*/
  messageDesc(file_chat_chat, 6);

/**
 * @generated from message chat.UserGroupsRequest
 */
export type UserGroupsRequest = Message$1<"chat.UserGroupsRequest"> & {
  /**
   * @generated from field: uint64 userId = 1;
   */
  userId: bigint;
};

/**
 * Describes the message chat.UserGroupsRequest.
 * Use `create(UserGroupsRequestSchema)` to create a new message.
 */
export const UserGroupsRequestSchema: GenMessage<UserGroupsRequest> = /*@__PURE__*/
  messageDesc(file_chat_chat, 7);

/**
 * @generated from message chat.UserGroupsResponse
 */
export type UserGroupsResponse = Message$1<"chat.UserGroupsResponse"> & {
  /**
   * @generated from field: repeated chat.Group groups = 1;
   */
  groups: Group[];
};

/**
 * Describes the message chat.UserGroupsResponse.
 * Use `create(UserGroupsResponseSchema)` to create a new message.
 */
export const UserGroupsResponseSchema: GenMessage<UserGroupsResponse> = /*@__PURE__*/
  messageDesc(file_chat_chat, 8);

/**
 * @generated from message chat.Group
 */
export type Group = Message$1<"chat.Group"> & {
  /**
   * @generated from field: uint64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string creatorId = 3;
   */
  creatorId: string;

  /**
   * @generated from field: repeated string memberIds = 4;
   */
  memberIds: string[];
};

/**
 * Describes the message chat.Group.
 * Use `create(GroupSchema)` to create a new message.
 */
export const GroupSchema: GenMessage<Group> = /*@__PURE__*/
  messageDesc(file_chat_chat, 9);

/**
 * Service de messagerie
 *
 * @generated from service chat.ChatService
 */
export const ChatService: GenService<{
  /**
   * @generated from rpc chat.ChatService.SendMessage
   */
  sendMessage: {
    methodKind: "unary";
    input: typeof MessageRequestSchema;
    output: typeof MessageResponseSchema;
  },
  /**
   * @generated from rpc chat.ChatService.GetMessageHistory
   */
  getMessageHistory: {
    methodKind: "server_streaming";
    input: typeof HistoryRequestSchema;
    output: typeof MessageSchema;
  },
  /**
   * @generated from rpc chat.ChatService.StreamMessages
   */
  streamMessages: {
    methodKind: "server_streaming";
    input: typeof StreamRequestSchema;
    output: typeof MessageSchema;
  },
  /**
   * @generated from rpc chat.ChatService.CreateGroup
   */
  createGroup: {
    methodKind: "unary";
    input: typeof GroupRequestSchema;
    output: typeof GroupResponseSchema;
  },
  /**
   * @generated from rpc chat.ChatService.GetUserGroups
   */
  getUserGroups: {
    methodKind: "unary";
    input: typeof UserGroupsRequestSchema;
    output: typeof UserGroupsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_chat_chat, 0);

